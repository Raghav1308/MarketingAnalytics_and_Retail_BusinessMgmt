What is Excel Solver?
Excel Solver is an optimization tool that finds the best solution (maximum, minimum, or specific value) for a formula in one cell (the objective) by changing values in other cells (the variables/decision cells) subject to certain constraints.

How Solver Works Internally (at a high level)
Solver attempts to find the best combination of values for your decision variables by repeatedly adjusting them and calculating the objective value. It uses different mathematical algorithms based on the type of problem:

Linear, Non-linear, Integer, Non-smooth or discontinuous functions

Depending on your model's nature, Solver picks (or lets you pick) one of its three solving methods:

 Solver Methods in Detail
1. GRG Nonlinear (Generalized Reduced Gradient)
Used for smooth nonlinear problems.

 Use When:
Your objective and constraints involve non-linear equations, but they're differentiable (smooth curves).

You’re using math functions like exponential, logarithmic, or polynomial (e.g., =A1^2 + LOG(A2)).

How it Works:
Starts at an initial guess.

Uses partial derivatives (gradient) to decide which direction to move.

Adjusts decision variables step-by-step to improve the objective.

Stops when further improvements are negligible or constraints are violated.

Good For:
Forecasting models with smooth curves.

Financial models involving compounding.

2. Simplex LP (Linear Programming)
Used for linear problems.

Use When:
Your objective function and constraints are all linear (no exponents, logs, IFs, etc.).

For example: =3*A1 + 2*A2, with constraints like A1 + A2 <= 100.

How it Works:
Evaluates feasible corner points in a multi-dimensional space.

Finds the optimal point among them using the Simplex algorithm.

Fast and precise for linear problems.

Good For:
Resource allocation

Scheduling

Transportation/logistics problems

3. Evolutionary Solver
Used for non-smooth, discontinuous, or combinatorial problems.

Use When:
Your model uses functions like IF(), CHOOSE(), LOOKUP(), or involves discrete variables.

You can’t calculate a gradient (the function is “bumpy”).

How it Works:
Inspired by genetic algorithms and natural selection.

Generates a population of candidate solutions.

Evolves them over time using mutation, crossover, and selection.

Eventually converges on a near-optimal solution.

Good For:
Complex forecasting models with IF logic.

Situations where you want to try combinations of different strategies or policies.

How to Choose the Right Solver Method?
Situation	Best Method	Why?
All formulas are linear	Simplex LP	Fastest, most accurate for linear cases
Formulas are smooth and nonlinear	GRG Nonlinear	Uses gradient to converge quickly
Formulas are non-smooth, use IF/LOOKUP, or are discrete	Evolutionary	Handles “black-box” and discontinuous logic

 How Solver Finds Solutions (Computational Logic)
Initialization: It starts with a guess (based on your initial variable values).

Evaluation: Computes the objective function and constraints.

Iteration: Adjusts decision variables to improve the objective.

GRG: Uses derivative-based direction.

Simplex: Jumps between feasible corner points.

Evolutionary: Evolves a set of solutions.

Convergence: Stops when it finds an optimal (or near-optimal) solution, or reaches time/iteration limits.

Tips for Using Solver Effectively
Always start simple: Begin with fewer variables or constraints to test the logic.

Check smoothness: Use GRG only if your model is differentiable.

Scale your variables: GRG and Simplex perform better if variables are of similar magnitude.

Use bounds: Add constraints like 0 <= A1 <= 100 to speed up computation.

Set iterations/time limits: Especially important for Evolutionary Solver.









Tuning Solver options can significantly improve the performance, accuracy, and speed of your optimization, especially for GRG Nonlinear and Evolutionary methods. Below is a breakdown of key Solver options and tuning strategies for each method.

Where to Access Solver Options
After setting your Solver model:

Click Solver → Options… button.

Depending on the selected solving method, you’ll see different sets of parameters.

Tuning Options for GRG Nonlinear
GRG Nonlinear works best when your model is smooth (differentiable). Key options:

🔹 1. Convergence:
Default: 0.0001

Lower it (e.g., 0.00001) for more accurate results.

Higher it (e.g., 0.001) if you want faster but less precise results.

Think of it like telling Solver when to stop — lower means wait until the solution is really close to optimal.

🔹 2. Derivatives
Usually left as "Forward" (default).

"Central" is more accurate but slower. Use if:

Your model is sensitive.

You need very precise solutions.

🔹 3. Multistart
Enables Solver to try multiple starting points.

Useful when the model has local minima.

Check “Use Multistart” and set a reasonable number (e.g., 10–20).

Without this, GRG might find a local optimum instead of the global one.

 4. Use Automatic Scaling
 Check this if your variables and objective values are on different scales (e.g., one variable ranges 0–1, another 1,000–10,000). It helps normalize them.

Tuning Options for Evolutionary Solver
This method works like natural selection. It’s great for non-smooth, discrete, or combinatorial models.

1. Mutation Rate
Default: 0.075

Increase (e.g., 0.1–0.3) if:

Your solutions get stuck.

You want to explore more diverse options.

Lower (e.g., 0.01–0.05) if:

You want to refine around a known good region.

Higher mutation = more randomness (exploration), lower = more focus (exploitation).

🔹 2. Population Size
Default: 100

Increase (200–300) for complex problems.

Larger sizes lead to better results, but more time-consuming.

🔹 3. Maximum Time Without Improvement
Default: 30 seconds.

Increase if you want Solver to work longer to find a better solution.

🔹 4. Constraint Handling
Leave as "Use Penalty Function" unless you're working with tricky constraints.

You can tighten or relax penalties if constraints are too strict/loose.

🔹 5. Random Seed
Set a number if you want reproducibility (e.g., always get the same solution).

 General Solver Options
These apply across methods:

Option	When to Tune	Tips
Max Time	Solver taking too long	Default: 100s. Reduce for quick testing. Increase for final runs.
Iterations	Solver stops too early	Set to 10,000+ for big models.
Precision	Need accuracy in constraints	Set to 0.000001 for strict constraints.
Tolerance (Simplex only)	Integer precision	Use lower (e.g., 1%) for tighter integer control.

 Tuning Strategy (Step-by-Step)
Run Solver with defaults – See if it gives reasonable output.

Check output behavior – Are results consistent or erratic?

If non-smooth or IF logic → Evolutionary – Then:

Increase Population to 200+

Set Mutation Rate around 0.1–0.2

Increase Max Time if convergence is slow

If nonlinear and smooth → GRG Nonlinear – Then:

Turn on Multistart

Lower Convergence to improve accuracy

Use Automatic Scaling if variables differ greatly

Rerun and compare – Always evaluate the solution’s feasibility and quality.